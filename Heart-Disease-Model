import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split   ##to train or split our data set
from sklearn.linear_model import LogisticRegression  ## for binary classification
from sklearn.metrics import accuracy_score         ## to evalute our model 
heart_disease=pd.read_csv('heart_disease_data.csv')
heart_disease.head()
heart_disease.info()
## statistical measure of dataset
heart_disease.describe()
heart_disease['target'].value_counts()
heart_disease.shape
### checking any null values
heart_disease.isnull().sum()
## splitting the data
x=heart_disease.drop(columns='target', axis=1)
y=heart_disease['target']
print(x)
print(y)
### spliting data into train and test data
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)
print(x.shape,x_test.shape,x_train.shape)
## model training(use logistic regression model)
model=LogisticRegression()
## fit the logistic model in dataset
model.fit(x_train,y_train)
##model evaluation
## accuracy score
#accuracy on training data
train_data_prediction=model.predict(x_train)
training_data_accuracy=accuracy_score(train_data_prediction,y_train)
print('accuracy of training data set:',training_data_accuracy)
#accuracy on test data
test_data_prediction=model.predict(x_test)
test_data_accuracy=accuracy_score(test_data_prediction,y_test)
print('accuracy of test data set:',test_data_accuracy)
#building the predictive model
input_data=(40,1,0,110,167,0,0,114,1,2,1,0,3)
#convert the data into numpy array
input_data_as_numpy=np.asarray(input_data)
#reshape the data
input_data_reshaped=input_data_as_numpy.reshape(1,-1)
#predict the model
prediction=model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==0):
    print("Not heart disease")
else:
        print("heart disease")

